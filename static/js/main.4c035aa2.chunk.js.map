{"version":3,"sources":["components/icons/index.tsx","components/MaterialReveal/index.tsx","App.tsx","index.tsx"],"names":["Icon","type","props","useMemo","xmlns","viewBox","d","console","warn","height","width","StyledDiv","styled","div","MaterialReveal","className","variant","actions","children","useState","classList","setClassList","isActive","setIsActive","isOpen","setIsOpen","isOpenLast","setIsOpenLast","startPos","setStartPos","infoPanel","useRef","buttonPanel","useEffect","_classList","Array","isArray","push","split","c","map","v","info","current","onMouseDown","clientX","onMouseMove","buttons","buttonsWidth","offsetWidth","offset","Math","abs","style","transform","updateState","setopen","open","undefined","setAttribute","toString","querySelectorAll","forEach","button","removeAttribute","callUpdateState","onKeyUp","code","target","indexOf","onDoubleClick","convertMouseDown","touches","convertMouseMove","addEventListener","document","body","removeEventListener","join","ref","aria-expanded","action","title","aria-label","onClick","icon","defaultProps","TitleSpan","span","App","color","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.4c035aa2.chunk.js","sourcesContent":["import { useMemo } from 'react';\r\n\r\ninterface IconProps {\r\n  /** Name of icon do be displayed */\r\n  type: string;\r\n}\r\n\r\nexport default function Icon({ type, ...props }: IconProps) {\r\n  const icon = useMemo(() => {\r\n    switch (type) {\r\n      case 'delete':\r\n        return (\r\n          <svg {...props} xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\r\n            <path d=\"M16 9v10H8V9h8m-1.5-6h-5l-1 1H5v2h14V4h-3.5l-1-1zM18 7H6v12c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7z\" />\r\n          </svg>\r\n        );\r\n      case 'folder':\r\n        return (\r\n          <svg {...props} xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\r\n            <path d=\"M20 6h-8l-2-2H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V8c0-1.1-.9-2-2-2zm0 12H4V8h16v10z\" />\r\n          </svg>\r\n        );\r\n      case 'download':\r\n        return (\r\n          <svg {...props} xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\r\n            <path d=\"M19 9h-4V3H9v6H5l7 7 7-7zm-8 2V5h2v6h1.17L12 13.17 9.83 11H11zm-6 7h14v2H5z\" />\r\n          </svg>\r\n        );\r\n      case 'confirm':\r\n        return (\r\n          <svg {...props} xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\r\n            <path d=\"M9 16.2L4.8 12l-1.4 1.4L9 19 21 7l-1.4-1.4L9 16.2z\" />\r\n          </svg>\r\n        );\r\n      default:\r\n        console.warn(\r\n          type ? `Icon: type ${type} is not valid; using fallback` : `Icon: no type present; using fallback`,\r\n        );\r\n        return (\r\n          <svg {...props} height=\"24\" viewBox=\"0 0 24 24\" width=\"24\">\r\n            <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-2h2v2zm0-4h-2V7h2v6z\" />\r\n          </svg>\r\n        );\r\n    }\r\n  }, [props, type]);\r\n\r\n  return icon;\r\n}\r\n","import { useEffect, useState, useRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport MaterialRevealProps from './interface';\r\n\r\nimport styled from 'styled-components';\r\n\r\nconst StyledDiv = styled.div`\r\n  position: relative;\r\n  border-radius: 4px;\r\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.12), 0 1px 2px rgba(0, 0, 0, 0.24);\r\n  overflow: hidden;\r\n\r\n  &.variant--success {\r\n    background-color: #1b5e20;\r\n    color: #fefefe;\r\n  }\r\n\r\n  &.variant--info {\r\n    background-color: #0d47a1;\r\n    color: #fefefe;\r\n  }\r\n\r\n  &.variant--warn {\r\n    background-color: #b71c1c;\r\n    color: #fefefe;\r\n  }\r\n\r\n  & .material-reveal__options {\r\n    position: absolute;\r\n    top: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    left: 0;\r\n    display: flex;\r\n    justify-content: flex-end;\r\n    align-items: center;\r\n    color: currentColor;\r\n\r\n    & span {\r\n      padding: 0 0.25em;\r\n\r\n      & button {\r\n        cursor: pointer;\r\n        color: currentColor;\r\n        padding: 1em;\r\n        margin: 0;\r\n        margin-right: 0.25em;\r\n        border: 0;\r\n        border-radius: 50%;\r\n        background-color: transparent;\r\n\r\n        & > svg {\r\n          height: 2em;\r\n          width: 2em;\r\n          fill: currentColor;\r\n        }\r\n\r\n        &:hover,\r\n        &:focus {\r\n          background-color: rgba(255, 255, 255, 0.1);\r\n        }\r\n\r\n        &:active {\r\n          background-color: rgba(255, 255, 255, 0.15);\r\n        }\r\n\r\n        &:last-of-type {\r\n          margin-right: 0;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  & .material-reveal__outline {\r\n    content: '';\r\n    z-index: 2;\r\n    border-radius: 4px;\r\n    position: absolute;\r\n    top: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    left: 0;\r\n    pointer-events: none;\r\n    box-shadow: inset 0 0 0 1px #fefefe, inset 0 0 0 3px #01579b, inset 0 0 0 4px #fefefe;\r\n    opacity: 0;\r\n  }\r\n\r\n  & .material-reveal__info {\r\n    z-index: 1;\r\n    width: 100%;\r\n    position: relative;\r\n    border: 0;\r\n    margin: 0;\r\n    border-radius: 0;\r\n    text-align: left;\r\n    will-change: transform;\r\n    font-size: 16px;\r\n    cursor: grab;\r\n    background-color: #fefefe;\r\n    user-select: none;\r\n    padding: 0.8em 1em;\r\n    transition-property: transform;\r\n    transition-duration: 200ms;\r\n    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\r\n\r\n    @supports not (-ms-high-contrast: none) {\r\n      &:focus {\r\n        outline: none;\r\n\r\n        & ~ .material-reveal__outline {\r\n          opacity: 1;\r\n        }\r\n      }\r\n\r\n      @supports selector(:focus-visible) {\r\n        &:focus:not(:focus-visible) {\r\n          & ~ .material-reveal__outline {\r\n            opacity: 0;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  &.internal--user-control {\r\n    & .material-reveal__info {\r\n      transition: none;\r\n      cursor: grabbing;\r\n    }\r\n  }\r\n\r\n  &:not(.internal--user-control) {\r\n    & .material-reveal__info {\r\n      &:hover {\r\n        transform: translateX(-5px);\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default function MaterialReveal({ className, variant, actions, children }: MaterialRevealProps) {\r\n  const [classList, setClassList] = useState(['material-reveal']);\r\n\r\n  // main states\r\n  const [isActive, setIsActive] = useState(false);\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [isOpenLast, setIsOpenLast] = useState(false);\r\n  const [startPos, setStartPos] = useState<null | number>(null);\r\n\r\n  // element refs\r\n  const infoPanel = useRef<HTMLButtonElement>(null);\r\n  const buttonPanel = useRef<HTMLElement>(null);\r\n\r\n  // set up classes\r\n  useEffect(() => {\r\n    const _classList = ['material-reveal'];\r\n    if (Array.isArray(className)) {\r\n      _classList.push(...className);\r\n    } else {\r\n      for (let c of className.split(' ')) {\r\n        _classList.push(c);\r\n      }\r\n    }\r\n\r\n    if (Array.isArray(variant)) {\r\n      _classList.push(...variant.map((v) => `variant--${v}`));\r\n    } else {\r\n      for (let v of variant.split(' ')) {\r\n        if (v) _classList.push(`variant--${v}`);\r\n      }\r\n    }\r\n\r\n    if (isActive) _classList.push('internal--user-control');\r\n\r\n    setClassList(_classList);\r\n  }, [className, isActive, variant]);\r\n\r\n  // Add event listener\r\n  useEffect(() => {\r\n    const { current: info } = infoPanel;\r\n\r\n    if (info === null) return;\r\n\r\n    // when mouse is down set contol class and mark as active\r\n    const onMouseDown = ({ clientX }: MouseEvent | Touch) => {\r\n      setIsActive(true);\r\n      setStartPos(clientX);\r\n    };\r\n\r\n    // if active calculate new position of card\r\n    const onMouseMove = ({ clientX }: MouseEvent | Touch) => {\r\n      if (!isActive || startPos === null) return;\r\n\r\n      const { current: buttons } = buttonPanel;\r\n      const { current: info } = infoPanel;\r\n\r\n      if (buttons === null || info === null) return;\r\n\r\n      const buttonsWidth = buttons.offsetWidth;\r\n\r\n      const offset = isOpenLast ? clientX - startPos - buttonsWidth : clientX - startPos;\r\n\r\n      if (offset > 0) return;\r\n\r\n      setIsOpen(buttonsWidth < Math.abs(offset));\r\n\r\n      info.style.transform = `translatex(${offset}px)`;\r\n    };\r\n\r\n    // on release animate card to correct position\r\n    const updateState = (setopen?: boolean) => {\r\n      const { current: buttons } = buttonPanel;\r\n      const { current: info } = infoPanel;\r\n\r\n      if (buttons === null || info === null) return;\r\n\r\n      const open = setopen === undefined ? isOpen : setopen;\r\n\r\n      setIsActive(false);\r\n      setStartPos(null);\r\n      setIsOpenLast(open);\r\n      setIsOpen(open);\r\n      info.style.transform = open ? `translatex(-${buttons.offsetWidth}px)` : '';\r\n      info.setAttribute('aria-expanded', open.toString());\r\n      info.setAttribute('aria-hidden', (!open).toString());\r\n\r\n      buttons.querySelectorAll('button').forEach((button) => {\r\n        if (open) {\r\n          button.removeAttribute('disabled');\r\n        } else {\r\n          button.setAttribute('disabled', '');\r\n        }\r\n      });\r\n    };\r\n\r\n    // function to pass to update state without event info\r\n    const callUpdateState = () => {\r\n      updateState();\r\n    };\r\n\r\n    // keyboard interactions with cards\r\n    const onKeyUp = ({ code, target }: KeyboardEvent) => {\r\n      const { current: info } = infoPanel;\r\n\r\n      if (['Space', 'Enter'].indexOf(code) < 0 || target !== info) return;\r\n      updateState(!isOpen);\r\n    };\r\n\r\n    // keyboard interactions with cards\r\n    const onDoubleClick = () => {\r\n      updateState(!isOpen);\r\n    };\r\n\r\n    // convert touch event to mouse down\r\n    const convertMouseDown = ({ touches }: TouchEvent) => {\r\n      onMouseDown(touches[0]);\r\n    };\r\n\r\n    // convert touch event to mouse move\r\n    const convertMouseMove = ({ touches }: TouchEvent) => {\r\n      onMouseMove(touches[0]);\r\n    };\r\n\r\n    // keyboard listeners\r\n    info.addEventListener('keyup', onKeyUp);\r\n\r\n    // mouse listeners\r\n    info.addEventListener('dblclick', onDoubleClick);\r\n    info.addEventListener('mousedown', onMouseDown);\r\n    document.body.addEventListener('mouseup', callUpdateState);\r\n    document.body.addEventListener('mouseleave', callUpdateState);\r\n    document.body.addEventListener('mousemove', onMouseMove);\r\n\r\n    // touch listeners\r\n    info.addEventListener('touchstart', convertMouseDown);\r\n    document.body.addEventListener('touchend', callUpdateState);\r\n    document.body.addEventListener('touchcancel', callUpdateState);\r\n    document.body.addEventListener('touchmove', convertMouseMove);\r\n\r\n    return () => {\r\n      // keyboard listeners\r\n      info.removeEventListener('keyup', onKeyUp);\r\n\r\n      // mouse listeners\r\n      info.removeEventListener('dblclick', onDoubleClick);\r\n      info.removeEventListener('mousedown', onMouseDown);\r\n      document.body.removeEventListener('mouseup', callUpdateState);\r\n      document.body.removeEventListener('mouseleave', callUpdateState);\r\n      document.body.removeEventListener('mousemove', onMouseMove);\r\n\r\n      // touch listeners\r\n      info.removeEventListener('touchstart', convertMouseDown);\r\n      document.body.removeEventListener('touchend', callUpdateState);\r\n      document.body.removeEventListener('touchcancel', callUpdateState);\r\n      document.body.removeEventListener('touchmove', convertMouseMove);\r\n    };\r\n  }, [isActive, isOpen, isOpenLast, startPos]);\r\n\r\n  return (\r\n    <StyledDiv className={classList.join(' ')}>\r\n      <button ref={infoPanel} className=\"material-reveal__info\" aria-expanded=\"false\">\r\n        {children}\r\n      </button>\r\n      <div className=\"material-reveal__options\">\r\n        <span ref={buttonPanel}>\r\n          {actions.map((action) => (\r\n            <button title={action.title} aria-label={action.title} onClick={() => action.action}>\r\n              {action.icon}\r\n            </button>\r\n          ))}\r\n        </span>\r\n      </div>\r\n      <div className=\"material-reveal__outline\"></div>\r\n    </StyledDiv>\r\n  );\r\n}\r\n\r\nMaterialReveal.propTypes = {\r\n  /** className string - classes to be added to button */\r\n  className: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\r\n  /** variant string - variants to be added to the button */\r\n  variant: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\r\n  /** actions array - actions to be hidden behind the slider */\r\n  actions: PropTypes.array,\r\n};\r\n\r\nMaterialReveal.defaultProps = {\r\n  className: [],\r\n  variant: [],\r\n  actions: [],\r\n};\r\n","import React from 'react';\r\nimport './App.css';\r\n\r\nimport Icon from './components/icons';\r\nimport MaterialReveal from './components/MaterialReveal';\r\n\r\nimport styled from 'styled-components';\r\n\r\nconst TitleSpan = styled.span`\r\n  display: block;\r\n  font-weight: 600;\r\n  font-size: 1.3em;\r\n  margin: 0;\r\n  margin-bottom: 0.5em;\r\n  color: #212121;\r\n`;\r\n\r\nfunction App() {\r\n  return (\r\n    <aside>\r\n      <MaterialReveal\r\n        variant=\"warn\"\r\n        actions={[\r\n          {\r\n            title: 'delete',\r\n            icon: <Icon type=\"delete\" />,\r\n            action: () => {},\r\n          },\r\n        ]}\r\n      >\r\n        <TitleSpan>Delete notification</TitleSpan>\r\n        <span style={{ color: '#616161' }}>\r\n          This colour implies there is something bad that could happen, in this case it's a delete function.\r\n        </span>\r\n      </MaterialReveal>\r\n      <MaterialReveal\r\n        variant=\"info\"\r\n        actions={[\r\n          {\r\n            title: 'Open folder',\r\n            icon: <Icon type=\"folder\" />,\r\n            action: () => {},\r\n          },\r\n          {\r\n            title: 'download',\r\n            icon: <Icon type=\"download\" />,\r\n            action: () => {},\r\n          },\r\n        ]}\r\n      >\r\n        <TitleSpan>Info or Action notification</TitleSpan>\r\n        <span style={{ color: '#616161' }}>\r\n          This blue is an 'indifferent' colour meaning this is just to let you know or let you perform some action.\r\n        </span>\r\n      </MaterialReveal>\r\n      <MaterialReveal\r\n        variant=\"success\"\r\n        actions={[\r\n          {\r\n            title: 'confirm',\r\n            icon: <Icon type=\"confirm\" />,\r\n            action: () => {},\r\n          },\r\n        ]}\r\n      >\r\n        <TitleSpan>Success notification</TitleSpan>\r\n        <span style={{ color: '#616161' }}>\r\n          The green implies there was a success and all there is left to do is acknowledge it.\r\n        </span>\r\n      </MaterialReveal>\r\n    </aside>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}